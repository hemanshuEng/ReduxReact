{"version":3,"sources":["component/Postform.js","actions/postActions.js","actions/types.js","component/Posts.js","reducer/postReducer.js","reducer/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Postform","props","handleChange","e","setState","target","name","value","handleSubmit","preventDefault","post","title","state","body","createPost","onSubmit","this","className","onChange","type","placeholder","Component","connect","postData","dispatch","axios","then","payload","data","Posts","fetchPosts","nextProps","newPost","posts","unshift","postitems","map","key","id","items","item","console","log","get","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","React","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4UAKMA,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAORC,aAAe,SAAAC,GACb,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SATzB,EAWnBC,aAAe,SAAAL,GACbA,EAAEM,iBACF,IAAMC,EAAO,CACXC,MAAO,EAAKC,MAAMD,MAClBE,KAAM,EAAKD,MAAMC,MAGnB,EAAKZ,MAAMa,WAAWJ,GACtB,EAAKN,SAAS,CAAEO,MAAO,GAAIE,KAAM,MAjBjC,EAAKD,MAAQ,CACXD,MAAO,GACPE,KAAM,IAJS,E,sEAsBjB,OACE,6BACE,yCACA,0BAAME,SAAUC,KAAKR,cACnB,yBAAKS,UAAU,cACb,2BACEC,SAAUF,KAAKd,aACfiB,KAAK,OACLb,KAAK,QACLW,UAAU,eACVG,YAAY,QACZb,MAAOS,KAAKJ,MAAMD,SAGtB,yBAAKM,UAAU,cACb,2BACEC,SAAUF,KAAKd,aACfiB,KAAK,OACLb,KAAK,OACLW,UAAU,eACVG,YAAY,OACZb,MAAOS,KAAKJ,MAAMC,QAGtB,2BAAOM,KAAK,SAASF,UAAU,0B,GA/ClBI,aAwDRC,cACb,KACA,CAAER,WClDsB,SAACS,GAAD,OAAc,SAAAC,GACtCC,IAAMf,KAAK,6CAA8Ca,GAAUG,KAAK,SAAAhB,GAAI,OAAIc,EAAS,CACvFL,KCdoB,WDepBQ,QAASjB,EAAKkB,YD6CHN,CAGbtB,GG3DI6B,E,4LAEFb,KAAKf,MAAM6B,e,gDAEaC,GACpBA,EAAUC,SACZhB,KAAKf,MAAMgC,MAAMC,QAAQH,EAAUC,W,+BAIrC,IAAMG,EAAYnB,KAAKf,MAAMgC,MAAMG,IAAI,SAAA1B,GAAI,OACzC,yBAAK2B,IAAK3B,EAAK4B,GAAIrB,UAAU,SAC3B,4BAAKP,EAAKC,OACV,2BAAID,EAAKG,SAGb,OACE,6BACE,wBAAII,UAAU,eAAd,SACA,yBAAKA,UAAU,OAAOkB,Q,GAnBVd,aAkCLC,cAJS,SAAAV,GAAK,MAAK,CAChCqB,MAAOrB,EAAMqB,MAAMM,MACnBP,QAASpB,EAAMqB,MAAMO,OAIrB,CAAEV,WFtCsB,kBAAM,SAAAN,GAC9BiB,QAAQC,IAAI,WACZjB,IAAMkB,IAAI,8CAA8CjB,KAAK,SAAAO,GAAK,OAChET,EAAS,CACPL,KCPqB,cDQrBQ,QAASM,EAAML,YE+BNN,CAGbO,G,kkBCxCF,IAAMe,EAAe,CACnBL,MAAO,GACPC,KAAM,ICFOK,cAAgB,CAC7BZ,MDIa,WAAwC,IAA/BrB,EAA8B,uDAAtBgC,EAAcE,EAAQ,uCACpD,OAAQA,EAAO3B,MACb,IFTuB,cEWrB,OADAsB,QAAQC,IAAI,WACL,EAAP,GACK9B,EADL,CAEE2B,MAAOO,EAAOnB,UAElB,IFdoB,WEelB,YACKf,EADL,CAEE4B,KAAKM,EAAOnB,UAEhB,QACE,OAAOf,MEfPmC,EAAW,CAACC,KAKHC,EAJDC,YAAYC,EAHN,GAGgCC,YAAQC,IAAe,WAAf,EAAmBN,GAC/EO,OAAOC,8BAAgCD,OAAOC,iCCe/BC,G,uLAbX,OACE,kBAAC,IAAD,CAAUP,MAAOA,GACf,6BACE,yBAAKhC,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,a,GAPMwC,IAAMpC,YCIJqC,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC,iB","file":"static/js/main.81fb0675.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { createPost } from \"../actions/postActions\";\r\n\r\nclass Postform extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: \"\",\r\n      body: \"\"\r\n    };\r\n    //this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const post = {\r\n      title: this.state.title,\r\n      body: this.state.body\r\n    };\r\n    //call action\r\n    this.props.createPost(post);\r\n    this.setState({ title: \"\", body: \"\" });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Add Posts</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div className=\"form-group\">\r\n            <input\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              name=\"title\"\r\n              className=\"form-control\"\r\n              placeholder=\"Title\"\r\n              value={this.state.title}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              onChange={this.handleChange}\r\n              type=\"text\"\r\n              name=\"body\"\r\n              className=\"form-control\"\r\n              placeholder=\"Body\"\r\n              value={this.state.body}\r\n            />\r\n          </div>\r\n          <input type=\"submit\" className=\"btn btn-primary\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPostform.propTypes = {\r\n  createPost: PropTypes.func.isRequired\r\n};\r\nexport default connect(\r\n  null,\r\n  { createPost }\r\n)(Postform);\r\n","import { FETCH_POSTS, NEW_POST } from \"./types\";\r\nimport axios from \"axios\";\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n  console.log(\"fething\");\r\n  axios.get(\"https://jsonplaceholder.typicode.com/posts\").then(posts =>\r\n    dispatch({\r\n      type: FETCH_POSTS,\r\n      payload: posts.data\r\n    })\r\n  );\r\n};\r\n\r\nexport const createPost = (postData) => dispatch => {\r\n  axios.post(\"https://jsonplaceholder.typicode.com/posts\", postData).then(post => dispatch({\r\n    type: NEW_POST,\r\n    payload: post.data\r\n  }));\r\n};","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchPosts } from \"../actions/postActions\";\r\n\r\nclass Posts extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchPosts();\r\n  }\r\n  componentWillReceiveProps(nextProps) {\r\n    if (nextProps.newPost) {\r\n      this.props.posts.unshift(nextProps.newPost);\r\n    }\r\n  }\r\n  render() {\r\n    const postitems = this.props.posts.map(post => (\r\n      <div key={post.id} className=\"col-6\">\r\n        <h3>{post.title}</h3>\r\n        <p>{post.body}</p>\r\n      </div>\r\n    ));\r\n    return (\r\n      <div>\r\n        <h1 className=\"text-center\">Posts</h1>\r\n        <div className=\"row\">{postitems}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nPosts.propTypes = {\r\n  fetchPosts: PropTypes.func.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  newPost: PropTypes.object\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.items,\r\n  newPost: state.posts.item\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchPosts }\r\n)(Posts);\r\n","import { FETCH_POSTS, NEW_POST } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  item: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_POSTS:\r\n      console.log(\"reducer\");\r\n      return {\r\n        ...state,\r\n        items: action.payload\r\n      };\r\n    case NEW_POST:\r\n      return{\r\n        ...state,\r\n        item:action.payload\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport postReducer from \"./postReducer\";\r\nexport default combineReducers({\r\n  posts: postReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducer';\r\n\r\nconst initialState ={};\r\n\r\nconst middleware=[thunk];\r\nconst store = createStore(rootReducer ,initialState,compose(applyMiddleware(...middleware),\r\nwindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n));\r\n\r\nexport default store;","import React from \"react\";\nimport Postform from \"./component/Postform\";\nimport Posts from \"./component/Posts\";\nimport { Provider } from \"react-redux\";\nimport store from'./store';\nimport \"./App.css\";\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div>\n          <div className=\"container\">\n            <Postform />\n            <Posts />\n          </div>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './custom.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}